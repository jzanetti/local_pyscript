setwd("~/Github/r_project/tmp")
renv::init()
install.packages("servr")
servr::httd(,8080,TRUE)
servr::httd(,"8080",TRUE)
servr::httd()
setwd("~/Github/local_pyscript/examples/casual_learn_without_internet")
servr::httd()
servr::daemon_stop(2)
servr::daemon_stop(2)
servr::httd(,"8080",TRUE)
servr::httd(,8080,TRUE)
servr::httd(,"4000",TRUE)
servr::httd(,"localhost:8080",TRUE)
servr::httd(,"localhost",TRUE)
servr::httd(,"localhost")
library(servr)
httw(port = 8080)
install.packages("httpuv")
library(httpuv)
# Define a simple app
app <- list(
call = function(req) {
list(
status = 200L,
headers = list('Content-Type' = 'text/html'),
body = "Hello, world!"
)
}
)
# Start the server on port 8080
server <- startServer("127.0.0.1", 8080, app)
install.packages("httpuv")
install.packages("httpuv")
library(httpuv)
# Define a simple app
app <- list(
call = function(req) {
list(
status = 200L,
headers = list('Content-Type' = 'text/html'),
body = "Hello, world!"
)
}
)
server <- startServer("localhost", 8080, app)
server <- startServer("127.0.0.1", 8080, app)
dir_path <- "~/Github/local_pyscript/examples/casual_learn_without_internet"
# Define the app
app <- list(
call = function(req) {
# Construct the file path
file_path <- file.path(dir_path, "index.html")
# Check if the file exists
if (file.exists(file_path)) {
# Read the file content
content <- readLines(file_path, warn = FALSE)
body <- paste(content, collapse = "\n")
# Return the response with the HTML content
list(
status = 200L,
headers = list('Content-Type' = 'text/html'),
body = body
)
} else {
# Return a 404 error if the file doesn't exist
list(
status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = "404 Not Found: index.html does not exist."
)
}
}
)
server <- startServer("127.0.0.1", 8080, app)
server <- startServer("127.0.0.1", 8090, app)
library(httpuv)
# Define the path to the directory containing your files
dir_path <- "path/to/your/directory"
# Define the app
app <- list(
call = function(req) {
# Extract the requested path
path <- req$PATH_INFO
# Default to index.html if the path is "/"
if (path == "/") {
path <- "/index.html"
}
# Construct the full file path
file_path <- file.path(dir_path, path)
# Check if the file exists
if (file.exists(file_path)) {
# Determine the MIME type based on the file extension
mime_type <- switch(
tools::file_ext(file_path),
"html" = "text/html",
"js" = "application/javascript",
"css" = "text/css",
"png" = "image/png",
"jpg" = "image/jpeg",
"jpeg" = "image/jpeg",
"svg" = "image/svg+xml",
"json" = "application/json",
"text/plain" # Default MIME type
)
# Read the file content
content <- readBin(file_path, "raw", file.info(file_path)$size)
# Return the response with the correct MIME type
list(
status = 200L,
headers = list('Content-Type' = mime_type),
body = content
)
} else {
# Return a 404 error if the file doesn't exist
list(
status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = paste("404 Not Found:", path, "does not exist.")
)
}
}
)
server <- startServer("127.0.0.1", 8010, app)
dir_path <- "~/Github/local_pyscript/examples/casual_learn_without_internet"
# Define the app
app <- list(
call = function(req) {
# Extract the requested path
path <- req$PATH_INFO
# Default to index.html if the path is "/"
if (path == "/") {
path <- "/index.html"
}
# Construct the full file path
file_path <- file.path(dir_path, path)
# Check if the file exists
if (file.exists(file_path)) {
# Determine the MIME type based on the file extension
mime_type <- switch(
tools::file_ext(file_path),
"html" = "text/html",
"js" = "application/javascript",
"css" = "text/css",
"png" = "image/png",
"jpg" = "image/jpeg",
"jpeg" = "image/jpeg",
"svg" = "image/svg+xml",
"json" = "application/json",
"text/plain" # Default MIME type
)
# Read the file content
content <- readBin(file_path, "raw", file.info(file_path)$size)
# Return the response with the correct MIME type
list(
status = 200L,
headers = list('Content-Type' = mime_type),
body = content
)
} else {
# Return a 404 error if the file doesn't exist
list(
status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = paste("404 Not Found:", path, "does not exist.")
)
}
}
)
server <- startServer("127.0.0.1", 8020, app)
# Define the app
app <- list(
call = function(req) {
# Extract the requested path
path <- req$PATH_INFO
# Default to index.html if the path is "/"
if (path == "/") {
path <- "/index.html"
}
# Construct the full file path
file_path <- file.path(dir_path, path)
# Check if the file exists
if (file.exists(file_path)) {
# Determine the MIME type based on the file extension
mime_type <- switch(
tools::file_ext(file_path),
"html" = "text/html",
"js" = "application/javascript",
"mjs" = "application/javascript",  # Add support for .mjs files
"css" = "text/css",
"png" = "image/png",
"jpg" = "image/jpeg",
"jpeg" = "image/jpeg",
"svg" = "image/svg+xml",
"json" = "application/json",
"text/plain" # Default MIME type
)
# Read the file content
content <- readBin(file_path, "raw", file.info(file_path)$size)
# Return the response with the correct MIME type
list(
status = 200L,
headers = list('Content-Type' = mime_type),
body = content
)
} else {
# Return a 404 error if the file doesn't exist
list(
status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = paste("404 Not Found:", path, "does not exist.")
)
}
}
)
server <- startServer("127.0.0.1", 8030, app)
app <- list(
call = function(req) {
# Extract the requested path
path <- req$PATH_INFO
# Default to index.html if the path is "/"
if (path == "/") {
path <- "/index.html"
}
# Construct the full file path
file_path <- file.path(dir_path, path)
# Check if the file exists
if (file.exists(file_path)) {
# Determine the MIME type based on the file extension
mime_type <- switch(
tools::file_ext(file_path),
"html" = "text/html",
"js" = "application/javascript",
"mjs" = "application/javascript",  # Add support for .mjs files
"css" = "text/css",
"png" = "image/png",
"jpg" = "image/jpeg",
"jpeg" = "image/jpeg",
"svg" = "image/svg+xml",
"json" = "application/json",
"wasm" = "application/wasm",  # Add support for .wasm files
"text/plain" # Default MIME type
)
# Read the file content
content <- readBin(file_path, "raw", file.info(file_path)$size)
# Return the response with the correct MIME type
list(
status = 200L,
headers = list('Content-Type' = mime_type),
body = content
)
} else {
# Return a 404 error if the file doesn't exist
list(
status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = paste("404 Not Found:", path, "does not exist.")
)
}
}
)
server <- startServer("127.0.0.1", 8040, app)
