{"version":3,"file":"codemirror_lang-python-BgZ6XoEX.js","sources":["../node_modules/@lezer/lr/dist/index.js","../node_modules/@lezer/python/dist/index.js","../node_modules/@codemirror/lang-python/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/**\nA parse stack. These are used internally by the parser to track\nparsing progress. They also provide some properties and methods\nthat external code such as a tokenizer can use to get information\nabout the parse state.\n*/\nclass Stack {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parse that this stack is part of @internal\n    */\n    p, \n    /**\n    Holds state, input pos, buffer index triplets for all but the\n    top state @internal\n    */\n    stack, \n    /**\n    The current parse state @internal\n    */\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /**\n    @internal\n    */\n    reducePos, \n    /**\n    The input position up to which this stack has parsed.\n    */\n    pos, \n    /**\n    The dynamic score of the stack, including dynamic precedence\n    and error-recovery penalties\n    @internal\n    */\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /**\n    @internal\n    */\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /**\n    @internal\n    */\n    bufferBase, \n    /**\n    @internal\n    */\n    curContext, \n    /**\n    @internal\n    */\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /**\n    @internal\n    */\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /**\n    @internal\n    */\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /**\n    The stack's current [context](#lr.ContextTracker) value, if\n    any. Its type will depend on the context tracker's type\n    parameter, or it will be `null` if there is no context\n    tracker.\n    */\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /**\n    @internal\n    */\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /**\n    @internal\n    */\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;\n        if (lookaheadRecord)\n            this.setLookAhead(this.pos);\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /**\n    @internal\n    */\n    storeNode(term, start, end, size = 4, mustSink = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!mustSink || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {\n                let mustMove = false;\n                for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {\n                    if (this.buffer[scan - 1] >= 0) {\n                        mustMove = true;\n                        break;\n                    }\n                }\n                if (mustMove)\n                    while (index > 0 && this.buffer[index - 2] > end) {\n                        // Move this record forward\n                        this.buffer[index] = this.buffer[index - 4];\n                        this.buffer[index + 1] = this.buffer[index - 3];\n                        this.buffer[index + 2] = this.buffer[index - 2];\n                        this.buffer[index + 3] = this.buffer[index - 1];\n                        index -= 4;\n                        if (size > 4)\n                            size -= 4;\n                    }\n            }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /**\n    @internal\n    */\n    shift(action, type, start, end) {\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (end > this.pos || type <= parser.maxNode) {\n                this.pos = end;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = end;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(type, start);\n            if (type <= parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = end;\n            this.shiftContext(type, start);\n            if (type <= this.p.parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n    }\n    // Apply an action\n    /**\n    @internal\n    */\n    apply(action, next, nextStart, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextStart, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /**\n    @internal\n    */\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /**\n    @internal\n    */\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /**\n    @internal\n    */\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /**\n    Check if the given term would be able to be shifted (optionally\n    after some reductions) on this stack. This can be useful for\n    external tokenizers that want to make sure they only provide a\n    given token when it applies.\n    */\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /**\n    @internal\n    */\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.reducePos = this.pos;\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /**\n    @internal\n    */\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /**\n    Try to scan through the automaton to find some kind of reduction\n    that can be applied. Used when the regular ForcedReduce field\n    isn't a valid action. @internal\n    */\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /**\n    @internal\n    */\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n    Check whether this state has no further actions (assumed to be a direct descendant of the\n    top state, since any other states must be able to continue\n    somehow). @internal\n    */\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /**\n    Restart the stack (put it back in its start state). Only safe\n    when this.stack.length == 3 (state is directly below the top\n    state). @internal\n    */\n    restart() {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /**\n    @internal\n    */\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /**\n    Get the parser used by this stack.\n    */\n    get parser() { return this.p.parser; }\n    /**\n    Test whether a given dialect (by numeric ID, as exported from\n    the terms file) is enabled.\n    */\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /**\n    @internal\n    */\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /**\n    @internal\n    */\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /**\n    @internal\n    */\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /**\n    @internal\n    */\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/**\n[Tokenizers](#lr.ExternalTokenizer) interact with the input\nthrough this interface. It presents the input as a stream of\ncharacters, tracking lookahead and hiding the complexity of\n[ranges](#common.Parser.parse^ranges) from tokenizer code.\n*/\nclass InputStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    input, \n    /**\n    @internal\n    */\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /**\n        @internal\n        */\n        this.chunk = \"\";\n        /**\n        @internal\n        */\n        this.chunkOff = 0;\n        /**\n        Backup chunk\n        */\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /**\n        The character code of the next code unit in the input, or -1\n        when the stream is at the end of the input.\n        */\n        this.next = -1;\n        /**\n        @internal\n        */\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /**\n    @internal\n    */\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /**\n    @internal\n    */\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /**\n    Look at a code unit near the stream position. `.peek(0)` equals\n    `.next`, `.peek(-1)` gives you the previous character, and so\n    on.\n    \n    Note that looking around during tokenizing creates dependencies\n    on potentially far-away content, which may reduce the\n    effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    cause invalid reparses when looking backward more than 25 code\n    units, since the library does not track lookbehind.\n    */\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /**\n    Accept a token. By default, the end of the token is set to the\n    current stream position, but you can pass an offset (relative to\n    the stream position) to change that.\n    */\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    /**\n    Accept a token ending at a specific given position.\n    */\n    acceptTokenTo(token, endPos) {\n        this.token.value = token;\n        this.token.end = endPos;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /**\n    Move the stream forward N (defaults to 1) code units. Returns\n    the new value of [`next`](#lr.InputStream.next).\n    */\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /**\n    @internal\n    */\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /**\n    @internal\n    */\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/**\n@internal\n*/\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n@hide\n*/\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n`@external tokens` declarations in the grammar should resolve to\nan instance of this class.\n*/\nclass ExternalTokenizer {\n    /**\n    Create a tokenizer. The first argument is the function that,\n    given an input stream, scans for the types of tokens it\n    recognizes at the stream's position, and calls\n    [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    one.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Finish with \" + this.stackID(finished));\n                return this.stackToTree(finished);\n            }\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Force-finish \" + this.stackID(finished));\n                return this.stackToTree(finished.forceAll());\n            }\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {\n            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            let main = this.tokens.mainToken;\n            localStack.apply(action, term, main ? main.start : localStack.pos, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/**\nContext trackers are used to track stateful context (such as\nindentation in the Python grammar, or parent elements in the XML\ngrammar) needed by external tokenizers. You declare them in a\ngrammar file as `@context exportName from \"module\"`.\n\nContext values should be immutable, and can be updated (replaced)\non shift or reduce actions.\n\nThe export used in a `@context` declaration should be of this\ntype.\n*/\nclass ContextTracker {\n    /**\n    Define a context tracker.\n    */\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/**\nHolds the parse tables for a given grammar, as generated by\n`lezer-generator`, and provides [methods](#common.Parser) to parse\ncontent with.\n*/\nclass LRParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(spec) {\n        super();\n        /**\n        @internal\n        */\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Get a goto table entry @internal\n    */\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /**\n    Check if this state has an action for a given terminal @internal\n    */\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /**\n    @internal\n    */\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /**\n    @internal\n    */\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /**\n    @internal\n    */\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /**\n    @internal\n    */\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /**\n    Get the states that can follow this one through shift actions or\n    goto jumps. @internal\n    */\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /**\n    Configure the parser. Returns a new parser instance that has the\n    given settings modified. Settings not provided in `config` are\n    kept from the original parser.\n    */\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /**\n    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    are registered for this parser.\n    */\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /**\n    Returns the name associated with a given term. This will only\n    work for all terms when the parser was generated with the\n    `--names` option. By default, only the names of tagged terms are\n    stored.\n    */\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /**\n    The eof term id is always allocated directly after the node\n    types. @internal\n    */\n    get eofTerm() { return this.maxNode + 1; }\n    /**\n    The type of top node produced by the parser.\n    */\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /**\n    @internal\n    */\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /**\n    @internal\n    */\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /**\n    Used by the output of the parser generator. Not available to\n    user code. @hide\n    */\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","import { ExternalTokenizer, ContextTracker, LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst printKeyword = 1,\n  indent = 194,\n  dedent = 195,\n  newline$1 = 196,\n  blankLineStart = 197,\n  newlineBracketed = 198,\n  eof = 199,\n  stringContent = 200,\n  Escape = 2,\n  replacementStart = 3,\n  stringEnd = 201,\n  ParenL = 24,\n  ParenthesizedExpression = 25,\n  TupleExpression = 49,\n  ComprehensionExpression = 50,\n  BracketL = 55,\n  ArrayExpression = 56,\n  ArrayComprehensionExpression = 57,\n  BraceL = 59,\n  DictionaryExpression = 60,\n  DictionaryComprehensionExpression = 61,\n  SetExpression = 62,\n  SetComprehensionExpression = 63,\n  ArgList = 65,\n  subscript = 238,\n  String$1 = 71,\n  stringStart = 241,\n  stringStartD = 242,\n  stringStartL = 243,\n  stringStartLD = 244,\n  stringStartR = 245,\n  stringStartRD = 246,\n  stringStartRL = 247,\n  stringStartRLD = 248,\n  FormatString = 72,\n  stringStartF = 249,\n  stringStartFD = 250,\n  stringStartFL = 251,\n  stringStartFLD = 252,\n  stringStartFR = 253,\n  stringStartFRD = 254,\n  stringStartFRL = 255,\n  stringStartFRLD = 256,\n  FormatReplacement = 73,\n  nestedFormatReplacement = 77,\n  importList = 263,\n  TypeParamList = 112,\n  ParamList = 130,\n  SequencePattern = 151,\n  MappingPattern = 152,\n  PatternArgList = 155;\n\nconst newline = 10, carriageReturn = 13, space = 32, tab = 9, hash = 35, parenOpen = 40, dot = 46,\n      braceOpen = 123, braceClose = 125, singleQuote = 39, doubleQuote = 34, backslash = 92,\n      letter_o = 111, letter_x = 120, letter_N = 78, letter_u = 117, letter_U = 85;\n\nconst bracketed = new Set([\n  ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,\n  ArrayExpression, ArrayComprehensionExpression, subscript,\n  SetExpression, SetComprehensionExpression, FormatString, FormatReplacement, nestedFormatReplacement,\n  DictionaryExpression, DictionaryComprehensionExpression,\n  SequencePattern, MappingPattern, PatternArgList, TypeParamList\n]);\n\nfunction isLineBreak(ch) {\n  return ch == newline || ch == carriageReturn\n}\n\nfunction isHex(ch) {\n  return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n}\n\nconst newlines = new ExternalTokenizer((input, stack) => {\n  let prev;\n  if (input.next < 0) {\n    input.acceptToken(eof);\n  } else if (stack.context.flags & cx_Bracketed) {\n    if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);\n  } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&\n             stack.canShift(blankLineStart)) {\n    let spaces = 0;\n    while (input.next == space || input.next == tab) { input.advance(); spaces++; }\n    if (input.next == newline || input.next == carriageReturn || input.next == hash)\n      input.acceptToken(blankLineStart, -spaces);\n  } else if (isLineBreak(input.next)) {\n    input.acceptToken(newline$1, 1);\n  }\n}, {contextual: true});\n\nconst indentation = new ExternalTokenizer((input, stack) => {\n  let context = stack.context;\n  if (context.flags) return\n  let prev = input.peek(-1);\n  if (prev == newline || prev == carriageReturn) {\n    let depth = 0, chars = 0;\n    for (;;) {\n      if (input.next == space) depth++;\n      else if (input.next == tab) depth += 8 - (depth % 8);\n      else break\n      input.advance();\n      chars++;\n    }\n    if (depth != context.indent &&\n        input.next != newline && input.next != carriageReturn && input.next != hash) {\n      if (depth < context.indent) input.acceptToken(dedent, -chars);\n      else input.acceptToken(indent);\n    }\n  }\n});\n\n// Flags used in Context objects\nconst cx_Bracketed = 1, cx_String = 2, cx_DoubleQuote = 4, cx_Long = 8, cx_Raw = 16, cx_Format = 32;\n\nfunction Context(parent, indent, flags) {\n  this.parent = parent;\n  this.indent = indent;\n  this.flags = flags;\n  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + indent + (indent << 4) + flags + (flags << 6);\n}\n\nconst topIndent = new Context(null, 0, 0);\n\nfunction countIndent(space) {\n  let depth = 0;\n  for (let i = 0; i < space.length; i++)\n    depth += space.charCodeAt(i) == tab ? 8 - (depth % 8) : 1;\n  return depth\n}\n\nconst stringFlags = new Map([\n  [stringStart, 0],\n  [stringStartD, cx_DoubleQuote],\n  [stringStartL, cx_Long],\n  [stringStartLD, cx_Long | cx_DoubleQuote],\n  [stringStartR, cx_Raw],\n  [stringStartRD, cx_Raw | cx_DoubleQuote],\n  [stringStartRL, cx_Raw | cx_Long],\n  [stringStartRLD, cx_Raw | cx_Long | cx_DoubleQuote],\n  [stringStartF, cx_Format],\n  [stringStartFD, cx_Format | cx_DoubleQuote],\n  [stringStartFL, cx_Format | cx_Long],\n  [stringStartFLD, cx_Format | cx_Long | cx_DoubleQuote],\n  [stringStartFR, cx_Format | cx_Raw],\n  [stringStartFRD, cx_Format | cx_Raw | cx_DoubleQuote],\n  [stringStartFRL, cx_Format | cx_Raw | cx_Long],\n  [stringStartFRLD, cx_Format | cx_Raw | cx_Long | cx_DoubleQuote]\n].map(([term, flags]) => [term, flags | cx_String]));\n\nconst trackIndent = new ContextTracker({\n  start: topIndent,\n  reduce(context, term, _, input) {\n    if ((context.flags & cx_Bracketed) && bracketed.has(term) ||\n        (term == String$1 || term == FormatString) && (context.flags & cx_String))\n      return context.parent\n    return context\n  },\n  shift(context, term, stack, input) {\n    if (term == indent)\n      return new Context(context, countIndent(input.read(input.pos, stack.pos)), 0)\n    if (term == dedent)\n      return context.parent\n    if (term == ParenL || term == BracketL || term == BraceL || term == replacementStart)\n      return new Context(context, 0, cx_Bracketed)\n    if (stringFlags.has(term))\n      return new Context(context, 0, stringFlags.get(term) | (context.flags & cx_Bracketed))\n    return context\n  },\n  hash(context) { return context.hash }\n});\n\nconst legacyPrint = new ExternalTokenizer(input => {\n  for (let i = 0; i < 5; i++) {\n    if (input.next != \"print\".charCodeAt(i)) return\n    input.advance();\n  }\n  if (/\\w/.test(String.fromCharCode(input.next))) return\n  for (let off = 0;; off++) {\n    let next = input.peek(off);\n    if (next == space || next == tab) continue\n    if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)\n      input.acceptToken(printKeyword);\n    return\n  }\n});\n\nconst strings = new ExternalTokenizer((input, stack) => {\n  let {flags} = stack.context;\n  let quote = (flags & cx_DoubleQuote) ? doubleQuote : singleQuote;\n  let long = (flags & cx_Long) > 0;\n  let escapes = !(flags & cx_Raw);\n  let format = (flags & cx_Format) > 0;\n\n  let start = input.pos;\n  for (;;) {\n    if (input.next < 0) {\n      break\n    } else if (format && input.next == braceOpen) {\n      if (input.peek(1) == braceOpen) {\n        input.advance(2);\n      } else {\n        if (input.pos == start) {\n          input.acceptToken(replacementStart, 1);\n          return\n        }\n        break\n      }\n    } else if (escapes && input.next == backslash) {\n      if (input.pos == start) {\n        input.advance();\n        let escaped = input.next;\n        if (escaped >= 0) {\n          input.advance();\n          skipEscape(input, escaped);\n        }\n        input.acceptToken(Escape);\n        return\n      }\n      break\n    } else if (input.next == quote && (!long || input.peek(1) == quote && input.peek(2) == quote)) {\n      if (input.pos == start) {\n        input.acceptToken(stringEnd, long ? 3 : 1);\n        return\n      }\n      break\n    } else if (input.next == newline) {\n      if (long) {\n        input.advance();\n      } else if (input.pos == start) {\n        input.acceptToken(stringEnd);\n        return\n      }\n      break\n    } else {\n      input.advance();\n    }\n  }\n  if (input.pos > start) input.acceptToken(stringContent);\n});\n\nfunction skipEscape(input, ch) {\n  if (ch == letter_o) {\n    for (let i = 0; i < 2 && input.next >= 48 && input.next <= 55; i++) input.advance();\n  } else if (ch == letter_x) {\n    for (let i = 0; i < 2 && isHex(input.next); i++) input.advance();\n  } else if (ch == letter_u) {\n    for (let i = 0; i < 4 && isHex(input.next); i++) input.advance();\n  } else if (ch == letter_U) {\n    for (let i = 0; i < 8 && isHex(input.next); i++) input.advance();\n  } else if (ch == letter_N) {\n    if (input.next == braceOpen) {\n      input.advance();\n      while (input.next >= 0 && input.next != braceClose && input.next != singleQuote &&\n             input.next != doubleQuote && input.next != newline) input.advance();\n      if (input.next == braceClose) input.advance();\n    }\n  }\n}\n\nconst pythonHighlighting = styleTags({\n  \"async \\\"*\\\" \\\"**\\\" FormatConversion FormatSpec\": tags.modifier,\n  \"for while if elif else try except finally return raise break continue with pass assert await yield match case\": tags.controlKeyword,\n  \"in not and or is del\": tags.operatorKeyword,\n  \"from def class global nonlocal lambda\": tags.definitionKeyword,\n  import: tags.moduleKeyword,\n  \"with as print\": tags.keyword,\n  Boolean: tags.bool,\n  None: tags.null,\n  VariableName: tags.variableName,\n  \"CallExpression/VariableName\": tags.function(tags.variableName),\n  \"FunctionDefinition/VariableName\": tags.function(tags.definition(tags.variableName)),\n  \"ClassDefinition/VariableName\": tags.definition(tags.className),\n  PropertyName: tags.propertyName,\n  \"CallExpression/MemberExpression/PropertyName\": tags.function(tags.propertyName),\n  Comment: tags.lineComment,\n  Number: tags.number,\n  String: tags.string,\n  FormatString: tags.special(tags.string),\n  Escape: tags.escape,\n  UpdateOp: tags.updateOperator,\n  \"ArithOp!\": tags.arithmeticOperator,\n  BitOp: tags.bitwiseOperator,\n  CompareOp: tags.compareOperator,\n  AssignOp: tags.definitionOperator,\n  Ellipsis: tags.punctuation,\n  At: tags.meta,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace,\n  \".\": tags.derefOperator,\n  \", ;\": tags.separator\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_identifier = {__proto__:null,await:44, or:54, and:56, in:60, not:62, is:64, if:70, else:72, lambda:76, yield:94, from:96, async:102, for:104, None:162, True:164, False:164, del:178, pass:182, break:186, continue:190, return:194, raise:202, import:206, as:208, global:212, nonlocal:214, assert:218, type:223, elif:236, while:240, try:246, except:248, finally:250, with:254, def:258, class:268, match:279, case:285};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rOOQS,5>r,5>rO#KrQdO,5>qO#LTQdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#L]QdO1G1dOOQS7+)T7+)TP#LbQdO'#FwO#LrQdO1G2OO#MVQdO1G2OO#MgQdO1G2OP#MrQdO'#FxO#NPQdO7+)VO#NaQdO7+)VO#NaQdO7+)VO#NiQdO7+)VO#NyQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ dQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$ tQtO1G1|P$!OQdO'#FvOOQS1G2R1G2RP$!]QdO'#F{O$!jQdO7+)jO$#TQdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#cQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$#|QdO<<M[OOQS,5<q,5<qO$$_QdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$mQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(hQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$(uQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)WQfO7+'OO$)cQdO'#F_O$*jQdO7+'jO$*zQdO7+'jOOQS7+'j7+'jO$+VQdO<<LqO$+gQdO<<LqO$+gQdO<<LqO$+oQdO'#H^OOQS<<Lh<<LhO$+yQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,dQdO1G4RO$,lQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$,wQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-kQtO'#FaOOQS'#Fc'#FcO$-{QdO'#FbO$.mQdO'#FbOOQS'#Fb'#FbO$.rQdO'#IYO$)cQdO'#FiO$)cQdO'#FiO$/ZQdO'#FjO$)cQdO'#FkO$/bQdO'#IZOOQS'#IZ'#IZO$0PQdO,5;yOOQS<<KU<<KUO$0XQdO<<KUO$0iQdOANB]O$0yQdOANB]O$1RQdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1lQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2TQdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2]QtO,5<SO$)cQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$2}QdO,5;|O$3SQdO,5;|OOQS'#Fg'#FgO$)cQdO'#G`O$3tQdO,5<QO$4`QdO,5>tO$4pQdO,5>tO1XQdO,5<PO$5RQdO,5<TO$5WQdO,5<TO$)cQdO'#I[O$5]QdO'#I[O$5bQdO,5<UOOQS,5<V,5<VO'vQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5gQdOG27wO$5wQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$5|QtO'#FaO$6TQdO'#I]O$6cQdO'#I]O$6kQdO,5<XOOQS1G1h1G1hO$6pQdO1G1hO$6uQdO,5<zOOQS-E:^-E:^O$7aQdO,5=OO$7xQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8YQdO,5>vO$)cQdO,5>vOOQS1G1p1G1pO$8hQtO,5<[OOQU7+'P7+'PO$+oQdO1G/iO$)cQdO,5<YO$8oQdO,5>wO$8vQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)cQdO'#GdO$9OQdO1G4bO$9YQdO1G4bO$9bQdO1G4bOOQS7+%T7+%TO$9pQdO1G1tO$:OQtO'#FaO$:VQdO,5<}OOQS,5<},5<}O$:eQdO1G4cOOQS-E:a-E:aO$)cQdO,5<|O$:lQdO,5<|O$:qQdO7+)|OOQS-E:`-E:`O$:{QdO7+)|O$)cQdO,5<ZP$)cQdO'#GcO$;TQdO1G2hO$)cQdO1G2hP$;cQdO'#GbO$;jQdO<<MhO$;tQdO1G1uO$<SQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<bQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<uQdO'#GOO'vQdO'#GtO$=SQdO,59bO$=XQdO,59bO$=`QdO,59mO$=eQdO1G/UO1sQdO'#DRO8vQdO,59j\",\n  stateData: \"$>O~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-VO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)oOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)cOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-VOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)cOz/zO#[/OO%j.yO!['Oa~O{$da~P%SOg'Pa~P$)cOz0SOg'Pa~Oa0UO!['Oi~P$)oOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-VO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)cO{0^O~Oa0UO!['Oq~P$)oOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)oOa0UO!['Oy~P$)oO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~\",\n  goto: \"!=l'QPPPPPP'RP'Z*s+]+v,b,}-kP.YP'Z.y.y'ZPPP'Z2cPPPPPP2c5VPP5VP7g7p=xPP={>m>pPP'Z'ZPP?PPP'Z'ZPP'Z'Z'Z'Z'Z?T?}'ZP@QP@WD_G{HPPHSH^Hb'ZPPPHeHn'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHtIQIYPIaIgPIaPIaIaPPPIaPKuPLOLYL`KuPIaLiPIaPLpLvPLzM`M}NhLzLzNnN{LzLzLzLz! a! g! j! o! r! |!!S!!`!!r!!x!#S!#Y!#v!#|!$S!$^!$d!$j!$|!%W!%^!%d!%n!%t!%z!&Q!&W!&^!&h!&n!&x!'O!'X!'_!'n!'v!(Q!(XPPPPPPPPPPP!(_!(b!(h!(q!({!)WPPPPPPPPPPPP!-z!/`!3`!6pPP!6x!7X!7b!8Z!8Q!8d!8j!8m!8p!8s!8{!9lPPPPPPPPPPPPPPPPP!9o!9s!9yP!:_!:c!:o!:x!;U!;l!;o!;r!;x!<O!<U!<XP!<a!<j!=f!=i]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r}!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!P!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!R!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!T!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!V!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!X!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!]!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&cVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0r%mXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s![!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aR,^*RX#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&bQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QQ/q/VR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uR.S-fhUOn#d#g$j%|&_'w(p(r)t,P%S!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!]!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t\",\n  nodeNames: \"âš  print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard\",\n  maxTerm: 277,\n  context: trackIndent,\n  nodeProps: [\n    [\"isolate\", -5,4,71,72,73,77,\"\"],\n    [\"group\", -15,6,85,87,88,90,92,94,96,98,99,100,102,105,108,110,\"Statement Statement\",-22,8,18,21,25,40,49,50,56,57,60,61,62,63,64,67,70,71,72,79,80,81,82,\"Expression\",-10,114,116,119,121,122,126,128,133,135,138,\"Statement\",-9,143,144,147,148,150,151,152,153,154,\"Pattern\"],\n    [\"openedBy\", 23,\"(\",54,\"[\",58,\"{\"],\n    [\"closedBy\", 24,\")\",55,\"]\",59,\"}\"]\n  ],\n  propSources: [pythonHighlighting],\n  skippedNodes: [0,4],\n  repeatNodeCount: 34,\n  tokenData: \"!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T\",\n  tokenizers: [legacyPrint, indentation, newlines, strings, 0, 1, 2, 3, 4],\n  topRules: {\"Script\":[0,5]},\n  specialized: [{term: 221, get: (value) => spec_identifier[value] || -1}],\n  tokenPrec: 7664\n});\n\nexport { parser };\n","import { parser } from '@lezer/python';\nimport { syntaxTree, LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\n\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\n    \"Script\", \"Body\",\n    \"FunctionDefinition\", \"ClassDefinition\", \"LambdaExpression\",\n    \"ForStatement\", \"MatchClause\"\n]);\nfunction defID(type) {\n    return (node, def, outer) => {\n        if (outer)\n            return false;\n        let id = node.node.getChild(\"VariableName\");\n        if (id)\n            def(id, type);\n        return true;\n    };\n}\nconst gatherCompletions = {\n    FunctionDefinition: /*@__PURE__*/defID(\"function\"),\n    ClassDefinition: /*@__PURE__*/defID(\"class\"),\n    ForStatement(node, def, outer) {\n        if (outer)\n            for (let child = node.node.firstChild; child; child = child.nextSibling) {\n                if (child.name == \"VariableName\")\n                    def(child, \"variable\");\n                else if (child.name == \"in\")\n                    break;\n            }\n    },\n    ImportStatement(_node, def) {\n        var _a, _b;\n        let { node } = _node;\n        let isFrom = ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.name) == \"from\";\n        for (let ch = node.getChild(\"import\"); ch; ch = ch.nextSibling) {\n            if (ch.name == \"VariableName\" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != \"as\")\n                def(ch, isFrom ? \"variable\" : \"namespace\");\n        }\n    },\n    AssignStatement(node, def) {\n        for (let child = node.node.firstChild; child; child = child.nextSibling) {\n            if (child.name == \"VariableName\")\n                def(child, \"variable\");\n            else if (child.name == \":\" || child.name == \"AssignOp\")\n                break;\n        }\n    },\n    ParamList(node, def) {\n        for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {\n            if (child.name == \"VariableName\" && (!prev || !/\\*|AssignOp/.test(prev.name)))\n                def(child, \"variable\");\n            prev = child;\n        }\n    },\n    CapturePattern: /*@__PURE__*/defID(\"variable\"),\n    AsPattern: /*@__PURE__*/defID(\"variable\"),\n    __proto__: null\n};\nfunction getScope(doc, node) {\n    let cached = cache.get(node);\n    if (cached)\n        return cached;\n    let completions = [], top = true;\n    function def(node, type) {\n        let name = doc.sliceString(node.from, node.to);\n        completions.push({ label: name, type });\n    }\n    node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n        if (node.name) {\n            let gather = gatherCompletions[node.name];\n            if (gather && gather(node, def, top) || !top && ScopeNodes.has(node.name))\n                return false;\n            top = false;\n        }\n        else if (node.to - node.from > 8192) {\n            // Allow caching for bigger internal nodes\n            for (let c of getScope(doc, node.node))\n                completions.push(c);\n            return false;\n        }\n    });\n    cache.set(node, completions);\n    return completions;\n}\nconst Identifier = /^[\\w\\xa1-\\uffff][\\w\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\"String\", \"FormatString\", \"Comment\", \"PropertyName\"];\n/**\nCompletion source that looks up locally defined names in\nPython code.\n*/\nfunction localCompletionSource(context) {\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (dontComplete.indexOf(inner.name) > -1)\n        return null;\n    let isWord = inner.name == \"VariableName\" ||\n        inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n    if (!isWord && !context.explicit)\n        return null;\n    let options = [];\n    for (let pos = inner; pos; pos = pos.parent) {\n        if (ScopeNodes.has(pos.name))\n            options = options.concat(getScope(context.state.doc, pos));\n    }\n    return {\n        options,\n        from: isWord ? inner.from : context.pos,\n        validFor: Identifier\n    };\n}\nconst globals = /*@__PURE__*/[\n    \"__annotations__\", \"__builtins__\", \"__debug__\", \"__doc__\", \"__import__\", \"__name__\",\n    \"__loader__\", \"__package__\", \"__spec__\",\n    \"False\", \"None\", \"True\"\n].map(n => ({ label: n, type: \"constant\" })).concat(/*@__PURE__*/[\n    \"ArithmeticError\", \"AssertionError\", \"AttributeError\", \"BaseException\", \"BlockingIOError\",\n    \"BrokenPipeError\", \"BufferError\", \"BytesWarning\", \"ChildProcessError\", \"ConnectionAbortedError\",\n    \"ConnectionError\", \"ConnectionRefusedError\", \"ConnectionResetError\", \"DeprecationWarning\",\n    \"EOFError\", \"Ellipsis\", \"EncodingWarning\", \"EnvironmentError\", \"Exception\", \"FileExistsError\",\n    \"FileNotFoundError\", \"FloatingPointError\", \"FutureWarning\", \"GeneratorExit\", \"IOError\",\n    \"ImportError\", \"ImportWarning\", \"IndentationError\", \"IndexError\", \"InterruptedError\",\n    \"IsADirectoryError\", \"KeyError\", \"KeyboardInterrupt\", \"LookupError\", \"MemoryError\",\n    \"ModuleNotFoundError\", \"NameError\", \"NotADirectoryError\", \"NotImplemented\", \"NotImplementedError\",\n    \"OSError\", \"OverflowError\", \"PendingDeprecationWarning\", \"PermissionError\", \"ProcessLookupError\",\n    \"RecursionError\", \"ReferenceError\", \"ResourceWarning\", \"RuntimeError\", \"RuntimeWarning\",\n    \"StopAsyncIteration\", \"StopIteration\", \"SyntaxError\", \"SyntaxWarning\", \"SystemError\",\n    \"SystemExit\", \"TabError\", \"TimeoutError\", \"TypeError\", \"UnboundLocalError\", \"UnicodeDecodeError\",\n    \"UnicodeEncodeError\", \"UnicodeError\", \"UnicodeTranslateError\", \"UnicodeWarning\", \"UserWarning\",\n    \"ValueError\", \"Warning\", \"ZeroDivisionError\"\n].map(n => ({ label: n, type: \"type\" }))).concat(/*@__PURE__*/[\n    \"bool\", \"bytearray\", \"bytes\", \"classmethod\", \"complex\", \"float\", \"frozenset\", \"int\", \"list\",\n    \"map\", \"memoryview\", \"object\", \"range\", \"set\", \"staticmethod\", \"str\", \"super\", \"tuple\", \"type\"\n].map(n => ({ label: n, type: \"class\" }))).concat(/*@__PURE__*/[\n    \"abs\", \"aiter\", \"all\", \"anext\", \"any\", \"ascii\", \"bin\", \"breakpoint\", \"callable\", \"chr\",\n    \"compile\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"exec\", \"exit\", \"filter\",\n    \"format\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"isinstance\",\n    \"issubclass\", \"iter\", \"len\", \"license\", \"locals\", \"max\", \"min\", \"next\", \"oct\", \"open\",\n    \"ord\", \"pow\", \"print\", \"property\", \"quit\", \"repr\", \"reversed\", \"round\", \"setattr\", \"slice\",\n    \"sorted\", \"sum\", \"vars\", \"zip\"\n].map(n => ({ label: n, type: \"function\" })));\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"def ${name}(${params}):\\n\\t${}\", {\n        label: \"def\",\n        detail: \"function\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for ${name} in ${collection}:\\n\\t${}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"while ${}:\\n\\t${}\", {\n        label: \"while\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try:\\n\\t${}\\nexcept ${error}:\\n\\t${}\", {\n        label: \"try\",\n        detail: \"/ except block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if ${}:\\n\\t\\n\", {\n        label: \"if\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if ${}:\\n\\t${}\\nelse:\\n\\t${}\", {\n        label: \"if\",\n        detail: \"/ else block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name}:\\n\\tdef __init__(self, ${params}):\\n\\t\\t\\t${}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${module}\", {\n        label: \"import\",\n        detail: \"statement\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"from ${module} import ${names}\", {\n        label: \"from\",\n        detail: \"import\",\n        type: \"keyword\"\n    })\n];\n/**\nAutocompletion for built-in Python globals and keywords.\n*/\nconst globalCompletion = /*@__PURE__*/ifNotIn(dontComplete, /*@__PURE__*/completeFromList(/*@__PURE__*/globals.concat(snippets)));\n\nfunction innerBody(context) {\n    let { node, pos } = context;\n    let lineIndent = context.lineIndent(pos, -1);\n    let found = null;\n    for (;;) {\n        let before = node.childBefore(pos);\n        if (!before) {\n            break;\n        }\n        else if (before.name == \"Comment\") {\n            pos = before.from;\n        }\n        else if (before.name == \"Body\" || before.name == \"MatchBody\") {\n            if (context.baseIndentFor(before) + context.unit <= lineIndent)\n                found = before;\n            node = before;\n        }\n        else if (before.name == \"MatchClause\") {\n            node = before;\n        }\n        else if (before.type.is(\"Statement\")) {\n            node = before;\n        }\n        else {\n            break;\n        }\n    }\n    return found;\n}\nfunction indentBody(context, node) {\n    let base = context.baseIndentFor(node);\n    let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;\n    // Don't consider blank, deindented lines at the end of the\n    // block part of the block\n    if (/^\\s*($|#)/.test(line.text) &&\n        context.node.to < to + 100 &&\n        !/\\S/.test(context.state.sliceDoc(to, context.node.to)) &&\n        context.lineIndent(context.pos, -1) <= base)\n        return null;\n    // A normally deindenting keyword that appears at a higher\n    // indentation than the block should probably be handled by the next\n    // level\n    if (/^\\s*(else:|elif |except |finally:|case\\s+[^=:]+:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)\n        return null;\n    return base + context.unit;\n}\n/**\nA language provider based on the [Lezer Python\nparser](https://github.com/lezer-parser/python), extended with\nhighlighting and indentation information.\n*/\nconst pythonLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"python\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Body: context => {\n                    var _a;\n                    let inner = innerBody(context);\n                    return (_a = indentBody(context, inner || context.node)) !== null && _a !== void 0 ? _a : context.continue();\n                },\n                MatchBody: context => {\n                    var _a;\n                    let inner = innerBody(context);\n                    return (_a = indentBody(context, inner || context.node)) !== null && _a !== void 0 ? _a : context.continue();\n                },\n                IfStatement: cx => /^\\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                \"ForStatement WhileStatement\": cx => /^\\s*else:/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                TryStatement: cx => /^\\s*(except |finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                MatchStatement: cx => {\n                    if (/^\\s*case /.test(cx.textAfter))\n                        return cx.baseIndent + cx.unit;\n                    return cx.continue();\n                },\n                \"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression\": /*@__PURE__*/delimitedIndent({ closing: \")\" }),\n                \"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression\": /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                \"ArrayExpression ArrayComprehensionExpression\": /*@__PURE__*/delimitedIndent({ closing: \"]\" }),\n                \"String FormatString\": () => null,\n                Script: context => {\n                    var _a;\n                    let inner = innerBody(context);\n                    return (_a = (inner && indentBody(context, inner))) !== null && _a !== void 0 ? _a : context.continue();\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"ArrayExpression DictionaryExpression SetExpression TupleExpression\": foldInside,\n                Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })\n            })\n        ],\n    }),\n    languageData: {\n        closeBrackets: {\n            brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"'],\n            stringPrefixes: [\"f\", \"fr\", \"rf\", \"r\", \"u\", \"b\", \"br\", \"rb\",\n                \"F\", \"FR\", \"RF\", \"R\", \"U\", \"B\", \"BR\", \"RB\"]\n        },\n        commentTokens: { line: \"#\" },\n        // Indent logic logic are triggered upon below input patterns\n        indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:|case\\s+[^:]*:?)$/,\n    }\n});\n/**\nPython language support.\n*/\nfunction python() {\n    return new LanguageSupport(pythonLanguage, [\n        pythonLanguage.data.of({ autocomplete: localCompletionSource }),\n        pythonLanguage.data.of({ autocomplete: globalCompletion }),\n    ]);\n}\n\nexport { globalCompletion, localCompletionSource, python, pythonLanguage };\n"],"names":["Stack","constructor","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","toString","filter","_","i","concat","start","cx","parser","context","StackContext","pushState","push","length","reduce","action","_a","depth","type","lookaheadRecord","setLookAhead","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","undefined","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","mustSink","cur","top","index","mustMove","scan","shift","shiftContext","maxNode","nextState","apply","next","nextStart","nextEnd","useNode","value","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","some","v","result","forceReduce","validAction","target","backup","findForcedReduction","seen","explore","includes","allActions","rDepth","found","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","close","strict","goto","StackBufferCursor","maybeNext","create","id","fork","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","resolveOffset","offset","assoc","clipPos","Math","max","peek","idx","resolved","acceptToken","endOffset","RangeError","acceptTokenTo","endPos","getChunk","nextChunk","advance","n","setDone","read","r","min","TokenGroup","group","precTable","precOffset","groupMask","accEnd","allows","overrides","low","high","mid","readToken","tokenPrecTable","prototype","contextual","fallback","extend","ExternalTokenizer","options","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","test","LOG","stackIDs","cutAt","tree","side","cursor","IterMode","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nodeAt","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","stopped","stoppedTokens","newStacks","advanceStack","tok","finished","findFinished","console","log","stackID","stackToTree","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","strictCx","cxHash","cached","match","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","LRParser","Parser","spec","super","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","define","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","deflt","configure","config","copy","assign","info","t","find","external","contextTracker","wrap","hasWrappers","topNode","prec","values","part","Uint8Array","newline","bracketed","Set","isLineBreak","ch","isHex","newlines","cx_Bracketed","spaces","indentation","chars","indent","cx_DoubleQuote","cx_Long","cx_Raw","cx_Format","Context","topIndent","stringFlags","Map","trackIndent","has","space","countIndent","legacyPrint","fromCharCode","strings","quote","long","escapes","format","escaped","skipEscape","pythonHighlighting","styleTags","tags","modifier","controlKeyword","operatorKeyword","definitionKeyword","import","moduleKeyword","keyword","Boolean","bool","None","null","VariableName","variableName","function","definition","className","PropertyName","propertyName","Comment","lineComment","Number","number","string","FormatString","special","Escape","escape","UpdateOp","updateOperator","arithmeticOperator","BitOp","bitwiseOperator","CompareOp","compareOperator","AssignOp","definitionOperator","Ellipsis","punctuation","At","meta","paren","squareBracket","brace","derefOperator","separator","spec_identifier","__proto__","await","or","and","in","not","is","if","else","lambda","yield","async","for","True","False","del","pass","break","continue","return","raise","as","global","nonlocal","assert","elif","while","try","except","finally","with","def","class","case","Script","cache","NodeWeakMap","ScopeNodes","defID","node","getChild","gatherCompletions","FunctionDefinition","ClassDefinition","ForStatement","child","firstChild","ImportStatement","_node","_b","isFrom","AssignStatement","ParamList","CapturePattern","AsPattern","getScope","doc","completions","sliceString","label","iterate","gather","c","Identifier","dontComplete","localCompletionSource","syntaxTree","resolveInner","isWord","sliceDoc","explicit","validFor","globals","snippets","snippetCompletion","detail","globalCompletion","ifNotIn","completeFromList","innerBody","lineIndent","before","baseIndentFor","unit","indentBody","line","lineAt","text","textAfter","pythonLanguage","LRLanguage","indentNodeProp","add","Body","MatchBody","IfStatement","baseIndent","TryStatement","MatchStatement","delimitedIndent","closing","foldNodeProp","foldInside","languageData","closeBrackets","brackets","stringPrefixes","commentTokens","indentOnInput","python","LanguageSupport","of","autocomplete"],"mappings":"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","x_google_ignoreList":[0,1,2]}